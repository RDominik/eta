import asyncio
import goodwe
import time
from influxdb_client import InfluxDBClient, Point
from influxdb_client.client.write_api import SYNCHRONOUS
import os
import json
import influxPoints
from datetime import datetime


# InfluxDB Konfiguration
INFLUX_URL = "http://localhost:8086"
INFLUX_TOKEN = os.environ.get("INFLUX_TOKEN")
# INFLUX_TOKEN = "0R7WsRl_3hfg3mYaC4KvCqGsgNmJ2YFgAv8u8EQFzQL0oKWGJaIFAnXKHLil2DiWHMr2KZmbG1xcF-uEivfM4w=="
INFLUX_ORG = "dominik"
INFLUX_BUCKET = "goodwe"
print("InfluxDB-Token:", INFLUX_TOKEN)
# InfluxDB Client initialisieren
client = InfluxDBClient(url=INFLUX_URL, token=INFLUX_TOKEN, org=INFLUX_ORG)
write_api = client.write_api(write_options=SYNCHRONOUS)

async def connect_inverter(ip, port, retries=999, delay=30):
    for attempt in range(retries):
        try:
            inverter = await goodwe.connect(ip, port, 'ET', 0, 1, 1)
            print("Verbindung zum Wechselrichter hergestellt.")
            return inverter
        except Exception as e:
            print(f"[Fehler] Verbindung fehlgeschlagen: {e}")
            print(f"Versuche erneut in {delay} Sekunden... (Versuch {attempt + 1})")
            await asyncio.sleep(delay)
    raise RuntimeError("Verbindung zum Wechselrichter konnte nach mehreren Versuchen nicht hergestellt werden.")

async def main():
#inverter = await goodwe.connect('192.168.188.120', 8899, 'ET', 0, 1, 1)
#print("Verbindung hergestellt. Sende Daten an InfluxDB... (Strg+C zum Beenden)")
    inverter = await connect_inverter('192.168.188.120', 8899)
    print("Sende Daten an InfluxDB... (Strg+C zum Beenden)")
    try:
        while True:
            data = await inverter.read_runtime_data()
            #  Aktuelle Daten in eine Datei schreiben
            with open("current_influx_data.txt", "w") as f:
                json.dump(data, f, indent=2)
            # timestamp separat behandeln
            ts = data.pop("timestamp", datetime.utcnow())
            point = Point("inverter_data").tag("device", inverter.serial_number)

            # for key, value in data.items():
            #     # Nur gÃ¼ltige Datentypen als Felder einfÃ¼gen
            #     if isinstance(value, (int, float)):
            #        point = point.field(key, value)
            #     elif isinstance(value, str):
            #         point = point.tag(key, value)

            point = point.time(ts)
            # Beispiel: nur wenige Felder als Test
            point = Point("inverter_data") 
            point.tag("device", inverter.serial_number)
            point.field("vpv1", float(data["vpv1"]))
            point.field("ipv1", float(data["ipv1"]))
            point.field("ppv1", int(data["ppv1"]))
            point.field("vpv2", float(data["vpv2"]))
            point.field("ipv2", float(data["ipv2"]))
            point.field("ppv2", int(data["ppv2"]))
            point.field("vpv4", float(data["vpv4"]))
            point.field("ipv4", float(data["ipv4"]))
            point.field("ppv4", int(data["ppv4"]))
            point.field("vgrid", float(data["vgrid"]))
            point.field("igrid", float(data["igrid"]))
            point.field("fgrid", float(data["fgrid"]))
            point.field("pgrid", int(data["pgrid"]))
            point.field("vgrid2", float(data["vgrid2"]))
            point.field("igrid2", float(data["igrid2"]))
            point.field("fgrid2", float(data["fgrid2"]))
            point.field("pgrid2", int(data["pgrid2"]))
            point.field("vgrid3", float(data["vgrid3"]))
            point.field("igrid3", float(data["igrid3"]))
            point.field("fgrid3", float(data["fgrid3"]))
            point.field("pgrid3", int(data["pgrid3"]))  
            point.field("grid_mode", int(data["grid_mode"]))
            point.field("total_inverter_power", int(data["total_inverter_power"]))
            point.field("active_power", int(data["active_power"])) 
            point.field("grid_in_out", int(data["grid_in_out"]))
            point.field("reactive_power", int(data["reactive_power"]))
            point.field("apparent_power", int(data["apparent_power"]))
            point.field("backup_v1", float(data["backup_v1"]))
            point.field("backup_i1", float(data["backup_i1"]))
            point.field("backup_f1", float(data["backup_f1"]))
            point.field("load_mode1", int(data["load_mode1"]))
            point.field("backup_p1", int(data["backup_p1"]))
            point.field("backup_v2", float(data["backup_v2"]))
            point.field("backup_i2", float(data["backup_i2"]))
            point.field("backup_f2", float(data["backup_f2"]))
            point.field("load_mode2", int(data["load_mode2"]))
            point.field("backup_p2", int(data["backup_p2"]))
            point.field("backup_v3", float(data["backup_v3"]))
            point.field("backup_i3", float(data["backup_i3"]))
            point.field("backup_f3", float(data["backup_f3"]))            
            point.field("load_mode3", int(data["load_mode3"]))
            point.field("backup_p3", int(data["backup_p3"]))
            point.field("load_p1", int(data["load_p1"]))
            point.field("load_p2", int(data["load_p2"]))
            point.field("load_p3", int(data["load_p3"]))
            point.field("backup_ptotal", int(data["backup_ptotal"]))
            point.field("load_ptotal", int(data["load_ptotal"]))
            point.field("ups_load", int(data["ups_load"]))
            point.field("temperature_air", float(data["temperature_air"]))
            point.field("temperature_module", float(data["temperature_module"]))
            point.field("temperature", float(data["temperature"]))    
            point.field("function_bit", int(data["function_bit"]))
            point.field("bus_voltage", float(data["bus_voltage"]))
            point.field("nbus_voltage", float(data["nbus_voltage"]))
            point.field("vbattery1", float(data["vbattery1"]))  
            point.field("ibattery1", float(data["ibattery1"])) 
            point.field("pbattery1", int(data["pbattery1"]))    
            point.field("battery_mode", int(data["battery_mode"]))
            point.field("battery_mode_label", str(data["battery_mode_label"]))
            point.field("warning_code", int(data["warning_code"]))
            point.field("operation_mode", int(data["operation_mode"]))  
            point.field("error_codes", int(data["error_codes"])) 
            point.field("e_total", float(data["e_total"]))    
            point.field("e_day", float(data["e_day"]))
            point.field("e_total_exp", float(data["e_total_exp"]))
            point.field("h_total", int(data["h_total"]))
            point.field("e_day_exp", float(data["e_day_exp"]))  
            point.field("e_total_imp", float(data["e_total_imp"])) 
            point.field("e_day_imp", float(data["e_day_imp"])) 
            point.field("e_load_total", float(data["e_load_total"]))    
            point.field("e_load_day", float(data["e_load_day"]))
            point.field("e_bat_charge_total", float(data["e_bat_charge_total"]))
            point.field("e_bat_charge_day", float(data["e_bat_charge_day"]))
            point.field("e_bat_discharge_total", float(data["e_bat_discharge_total"]))  
            point.field("e_bat_discharge_day", float(data["e_bat_discharge_day"])) 
            point.field("house_consumption", int(data["house_consumption"]))  
            point.field("battery_bms", int(data["battery_bms"])) 
            point.field("battery_temperature", float(data["battery_temperature"])) 
            point.field("battery_charge_limit", int(data["battery_charge_limit"]))    
            point.field("battery_discharge_limit", int(data["battery_discharge_limit"]))
            point.field("battery_error_l", int(data["battery_error_l"]))
            point.field("battery_soc", int(data["battery_soc"]))
            point.field("battery_soh", int(data["battery_soh"]))  
            point.field("battery_warning_l", int(data["battery_warning_l"])) 
            point.field("rssi", int(data["rssi"])) 
            point.field("meter_test_status", int(data["meter_test_status"])) 
            point.field("meter_comm_status", int(data["meter_comm_status"]))    
            point.field("active_power1", int(data["active_power1"]))
            point.field("active_power2", int(data["active_power2"]))
            point.field("active_power3", int(data["active_power3"]))
            point.field("active_power_total", int(data["active_power_total"]))  
            point.field("reactive_power_total", int(data["reactive_power_total"]))      
            point.field("meter_freq", float(data["meter_freq"])) 
            point.field("meter_e_total_exp", float(data["meter_e_total_exp"])) 
            point.field("meter_e_total_imp", float(data["meter_e_total_imp"]))    
            point.field("meter_active_power1", int(data["meter_active_power1"]))
            point.field("meter_active_power2", int(data["meter_active_power2"]))
            point.field("meter_active_power3", int(data["meter_active_power3"]))
            point.field("meter_active_power_total", int(data["meter_active_power_total"]))  
            point.field("meter_reactive_power1", int(data["meter_reactive_power1"]))      
            point.field("meter_reactive_power2", int(data["meter_reactive_power2"])) 
            point.field("meter_reactive_power3", int(data["meter_reactive_power3"])) 
            point.field("meter_reactive_power_total", int(data["meter_reactive_power_total"]))    
            point.field("meter_apparent_power1", int(data["meter_apparent_power1"]))
            point.field("meter_apparent_power2", int(data["meter_apparent_power2"]))
            point.field("meter_apparent_power3", int(data["meter_apparent_power3"]))
            point.field("meter_apparent_power_total", int(data["meter_apparent_power_total"]))  
            point.field("meter_type", int(data["meter_type"]))  
            point.field("meter_sw_version", int(data["meter_sw_version"]))
            point.field("meter2_active_power", int(data["meter2_active_power"]))
            point.field("meter2_e_total_exp", float(data["meter2_e_total_exp"]))
            point.field("meter2_e_total_imp", float(data["meter2_e_total_imp"]))  
            point.field("meter2_comm_status", int(data["meter2_comm_status"]))      
            point.field("meter_voltage1", float(data["meter_voltage1"])) 
            point.field("meter_voltage2", float(data["meter_voltage2"])) 
            point.field("meter_voltage3", float(data["meter_voltage3"]))    
            point.field("meter_current1", float(data["meter_current1"]))
            point.field("meter_current2", float(data["meter_current2"]))
            point.field("meter_current3", float(data["meter_current3"]))
            point.field("meter_e_total_exp1", float(data["meter_e_total_exp1"]))  
            point.field("meter_e_total_exp2", float(data["meter_e_total_exp2"]))
            point.field("meter_e_total_exp3", float(data["meter_e_total_exp3"]))
            point.field("meter_e_total_imp1", float(data["meter_e_total_imp1"]))  
            point.field("meter_e_total_imp2", float(data["meter_e_total_imp2"]))
            point.field("ppv_total", int(data["ppv_total"])) 
            point.field("pv_channel", int(data["pv_channel"])) 
            point.field("vpv5", float(data["vpv5"]))    
            point.field("ipv5", float(data["ipv5"]))
            point.field("vpv6", float(data["vpv6"]))
            point.field("ipv6", float(data["ipv6"]))
            point.field("vpv7", float(data["vpv7"]))  
            point.field("ipv7", float(data["ipv7"]))
            point.field("vpv8", float(data["vpv8"]))
            point.field("ipv8", float(data["ipv8"]))  
            point.field("vpv9", float(data["vpv9"]))
            point.field("ipv9", float(data["ipv9"]))
            point.field("vpv10", float(data["vpv10"]))    
            point.field("ipv10", float(data["ipv10"]))
            point.field("vpv11", float(data["vpv11"]))
            point.field("ipv11", float(data["ipv11"]))
            point.field("vpv12", float(data["vpv12"]))  
            point.field("ipv12", float(data["ipv12"]))
            point.field("vpv13", float(data["vpv13"]))
            point.field("ipv13", float(data["ipv13"]))  
            point.field("vpv14", float(data["vpv14"]))
            point.field("ipv14", float(data["ipv14"]))
            point.field("vpv15", float(data["vpv15"]))    
            point.field("ipv15", float(data["ipv15"]))
            point.field("vpv16", float(data["vpv16"]))
            point.field("ipv16", float(data["ipv16"]))
            point.field("pmppt1", int(data["pmppt1"]))  
            point.field("pmppt2", int(data["pmppt2"]))
            point.field("pmppt3", int(data["pmppt3"]))
            point.field("pmppt4", int(data["pmppt4"]))  
            point.field("pmppt5", int(data["pmppt5"]))
            point.field("pmppt6", int(data["pmppt6"]))
            point.field("pmppt7", int(data["pmppt7"]))
            point.field("pmppt8", int(data["pmppt8"]))
            point.field("imppt1", float(data["imppt1"]))
            point.field("imppt2", float(data["imppt2"]))  
            point.field("imppt3", float(data["imppt3"]))
            point.field("imppt4", float(data["imppt4"]))
            point.field("imppt5", float(data["imppt5"]))    
            point.field("imppt6", float(data["imppt6"]))
            point.field("imppt7", float(data["imppt7"]))
            point.field("imppt8", float(data["imppt8"]))
            point.field("reactive_power1", int(data["reactive_power1"]))  
            point.field("reactive_power2", int(data["reactive_power2"]))
            point.field("reactive_power3", int(data["reactive_power3"]))
            point.field("apparent_power1", int(data["apparent_power1"]))  
            point.field("apparent_power2", int(data["apparent_power2"]))
            point.field("apparent_power3", int(data["apparent_power3"]))
            point.time(time.time_ns())

            print(f"\n--- Neue Messung ({time.strftime('%Y-%m-%d %H:%M:%S')}) ---")
            
             # ?? Rohdaten anzeigen
#print("Wird geschrieben:", point.to_line_protocol())
            write_api.write(bucket=INFLUX_BUCKET, org=INFLUX_ORG, record=point)
            await asyncio.sleep(5)

    except KeyboardInterrupt:
        print("Beendet.")
    finally:
        client.close()

asyncio.run(main())
